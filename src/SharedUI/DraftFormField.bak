import React, { Component } from "react";
import Editor from "draft-js-plugins-editor";
import createEmojiPlugin from "draft-js-emoji-plugin";
import { Button, Icon, Popup, Transition } from "semantic-ui-react";
import {
  EditorState,
  RichUtils,
  convertToRaw,
  convertFromRaw,
  KeyBindingUtil,
  CompositeDecorator
} from "draft-js";
import "draft-js-emoji-plugin/lib/plugin.css";
import "draft-js/dist/Draft.css";
import "draft-js-linkify-plugin/lib/plugin.css";
import "draft-js-emoji-plugin/lib/plugin.css";
import createLinkifyPlugin from "draft-js-linkify-plugin";
import "draft-js-counter-plugin/lib/plugin.css";
import createCounterPlugin from "draft-js-counter-plugin";
import { inject, observer } from "mobx-react";
import { UploadURL } from "./UploadURL.js";
import { DataEntryStore } from "../Stores/DataEntryStore";
import { UIStore } from "../Stores/UIStore";
import "../../node_modules/draft-js-linkify-plugin/lib/plugin.css";
import "../../node_modules/draft-js-emoji-plugin/lib/plugin.css";
import "./style.css";
import Emoji from "draft-js-emoji-plugin/lib/components/Emoji";
import Popover from "../../node_modules/draft-js-emoji-plugin/lib/components/EmojiSelect/Popover/index.js";

const counterPlugin = createCounterPlugin();
const { WordCounter } = counterPlugin;
// const emojiPlugin = createEmojiPlugin();

const emojiPlugin = createEmojiPlugin({
  selectButtonContent: "â˜º",
  useNativeArt: true
});
const linkifyPlugin = createLinkifyPlugin({
  target: "_blank"
});
const { EmojiSuggestions, EmojiSelect } = emojiPlugin;
const plugins = [emojiPlugin, linkifyPlugin, counterPlugin];

@inject("DataEntryStore", "UIStore")
@observer
export class DraftFormField extends Component {
  constructor(props) {
    super(props);
    const decorator = new CompositeDecorator([
      {
        strategy: this.findLinkEntities,
        component: this.Link
      }
    ]);
    if (this.props.loadContent === null) {
      this.state = {
        editorState: EditorState.createEmpty(decorator),
        urlValue: "",
        visible: true
      };
    } else {
      const contentState = convertFromRaw(this.props.loadContent);
      this.state = {
        editorState: EditorState.createWithContent(contentState),
        urlValue: "",
        visible: true
      };
    }
    this.onChange = editorState => this.setState({ editorState });
  }

  // onURLChange = e => this.setState({ urlValue: e.target.value });
  confirmLink = this._confirmLink.bind(this);
  onLinkInputKeyDown = this._onLinkInputKeyDown.bind(this);
  removeLink = this._removeLink.bind(this);

  _confirmLink(e) {
    e.preventDefault();
    const { editorState, urlValue } = this.state;
    const contentState = editorState.getCurrentContent();
    const contentStateWithEntity = contentState.createEntity(
      "LINK",
      "MUTABLE",
      {
        url:
          DataEntryStore.urlForUpload.prefix + DataEntryStore.urlForUpload.url,
        resourceID: Date.now()
      }
    );
    // console.log("content state object",contentStateWithEntity)
    const currentDecorator = new CompositeDecorator([
      {
        strategy: this.findLinkEntities,
        component: this.Link
      }
    ]);
    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();

    // const newEditorState = EditorState.set(editorState, { currentContent: contentStateWithEntity, decorator: currentDecorator});
    const newEditorState = EditorState.set(editorState, {
      currentContent: contentStateWithEntity
    });
    this.setState({
      editorState: RichUtils.toggleLink(
        newEditorState,
        newEditorState.getSelection(),
        entityKey
      )
    });
  }

  _onLinkInputKeyDown(e) {
    if (e.which === 13) {
      this._confirmLink(e);
    }
  }
  _removeLink(e) {
    e.preventDefault();
    const { editorState } = this.state;
    const selection = editorState.getSelection();
    if (!selection.isCollapsed()) {
      this.setState({
        editorState: RichUtils.toggleLink(editorState, selection, null)
      });
    }
  }
  getSelectedText = () => {
    // Get block for current selection
    let selection = this.state.editorState.getSelection();
    const anchorKey = selection.getAnchorKey();
    const contentState = this.state.editorState.getCurrentContent();
    const currentBlock = contentState.getBlockForKey(anchorKey);

    //Then based on the docs for SelectionState -
    const start = selection.getStartOffset();
    const end = selection.getEndOffset();
    const selectedText = currentBlock.getText().slice(start, end);
    return selectedText;
  };

  editorStateChanged = (newEditorState: EditorState) => {
    this.setState({ editorState: newEditorState });
  };

  handleKeyCommand = (command: string) => {
    const newState = RichUtils.handleKeyCommand(
      this.state.editorState,
      command
    );
    if (newState) {
      this.editorStateChanged(newState);
      return "handled";
    }
    return "not-handled";
  };

  passContent = () => {
    const contentState = this.state.editorState.getCurrentContent();
    DataEntryStore.toggleDraftContent(convertToRaw(contentState));
  };

  _onBoldClick() {
    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, "BOLD"));
  }
  _onUlineClick() {
    this.onChange(
      RichUtils.toggleInlineStyle(this.state.editorState, "UNDERLINE")
    );
  }
  _onItalicClick() {
    this.onChange(
      RichUtils.toggleInlineStyle(this.state.editorState, "ITALIC")
    );
  }
  _onUlClick() {
    this.onChange(
      RichUtils.toggleBlockType(this.state.editorState, "unordered-list-item")
    );
  }
  _onOlClick() {
    this.onChange(
      RichUtils.toggleBlockType(this.state.editorState, "ordered-list-item")
    );
  }

  Link = props => {
    const { url } = props.contentState.getEntity(props.entityKey).getData();
    return (
      <a href={url} target="_blank">
        {props.children}
      </a>
    );
  };

  findLinkEntities(contentBlock, callback, contentState) {
    contentBlock.findEntityRanges(character => {
      const entityKey = character.getEntity();
      return (
        entityKey !== null &&
        contentState.getEntity(entityKey).getType() === "LINK"
      );
    }, callback);
  }

  toggleVisibility = () => {
    this.setState({ visible: !this.state.visible });
  };

  render() {
    console.log(Popover.defaultProps.isOpen);
    const togglePopover = () => Popover.openUp;
    const urlButtonDisabled = this.getSelectedText() === "";
    const openURLModal = e => {
      e.preventDefault();
      UIStore.updateModal("uploadURL", !UIStore.modal.uploadURL);
      DataEntryStore.seturlForUpload("label", this.getSelectedText());
    };
    const addURL = this.props.includeURL ? (
      <React.Fragment>
        {" "}
        <Button
          disabled={urlButtonDisabled}
          className="linkbuttons"
          onClick={e => openURLModal(e)}
          icon
        >
          <Icon name="chain" />
        </Button>{" "}
        <Button
          disabled={urlButtonDisabled}
          className="linkbuttons"
          onClick={e => this.removeLink(e)}
          icon
        >
          <Icon name="unlink" />
        </Button>{" "}
      </React.Fragment>
    ) : null;

    return (
      <div className="Answer">
        <div>
          <div className="DraftTools">
            <div
              className="DraftButtons"
              style={{ float: "left", paddingTop: 5 }}
            >
              <Transition.Group animation={"fade up"} duration={150}>
                {this.state.visible && (
                  <div>
                    <div className="Draft-Float-Left">
                      {" "}
                      <EmojiSelect />
                    </div>
                    <div className="Draft-Float-Right">
                      <Button.Group>
                        <Button
                          className="FixButtonGroup"
                          icon
                          onClick={this._onBoldClick.bind(this)}
                        >
                          <Icon name="bold" />
                        </Button>
                        <Button icon onClick={this._onUlineClick.bind(this)}>
                          <Icon name="underline" />
                        </Button>
                        <Button icon onClick={this._onItalicClick.bind(this)}>
                          <Icon name="italic" />
                        </Button>
                        <Button icon onClick={this._onUlClick.bind(this)}>
                          <Icon name="unordered list" />
                        </Button>
                        <Button icon onClick={this._onOlClick.bind(this)}>
                          <Icon name="ordered list" />
                        </Button>

                        {addURL}
                      </Button.Group>
                    </div>
                  </div>
                )}
              </Transition.Group>
            </div>
            <div style={{ float: "right", paddingTop: 5 }}>
              <Popup
                trigger={
                  <Icon
                    size="large"
                    color="blue"
                    circular
                    inverted
                    name="binoculars"
                    disabled={this.state.visible}
                    onClick={e => this.toggleVisibility()}
                  />
                }
                content="View content with clickable links"
              />
            </div>
          </div>
          <div className="AnswerField">
            <Editor
              onBlur={e => this.passContent()}
              readOnly={!this.state.visible}
              editorState={this.state.editorState}
              onChange={this.editorStateChanged}
              handleKeyCommand={this.handleKeyCommand}
              decorators={[
                {
                  strategy: this.findLinkEntities,
                  component: this.Link
                }
              ]}
              plugins={plugins}
              ref={element => {
                this.editor = element;
              }}
         
            />
          </div>

          <EmojiSuggestions />
        </div>
        <div style={{ float: "left", paddingTop: 5 }}>
          <WordCounter limit={200} /> words
        </div>
        <div style={{ float: "right", paddingTop: 5 }}>
        </div>
        {/* <div className="EmojiLicense">
          Emoji by{" "}
          <a
            style={{ color: "rgb(179, 179, 179)" }}
            href="https://www.emojione.com"
            rel="noopener noreferrer"
            target="_blank"
          >
            EmojiOne
          </a>{" "}
        </div> */}
        <UploadURL
          open={UIStore.modal.uploadURL}
          selection={this.getSelectedText()}
          onSubmit={this.confirmLink}
        />
      </div>
    );
  }
}
