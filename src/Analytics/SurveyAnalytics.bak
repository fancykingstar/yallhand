import React from "react";
import {inject, observer} from "mobx-react"
import UTCtoFriendly from "../SharedCalculations/UTCtoFriendly"
import {giveMeKey} from "../SharedCalculations/GiveMeKey"
import { Table, Header,Icon} from "semantic-ui-react";
import { SearchBox } from "../SharedUI/SearchBox"
// import { survaignDetails } from "../SharedUI/survaignDetails";

@inject("AccountStore", "EmailStore", "TeamStore", "UIStore", "SurveyStore")
@observer
export class SurveyAnalytics extends React.Component {
  constructor(props){
    super(props)
    const {AccountStore} = this.props
    this.clickRate = (surv) => Number.isNaN(Math.round(surv.clicks / surv.total_views * 100))? 0 : Math.round(surv.clicks / surv.total_views * 100)
    this.sort = (controller, direction) => {
    //   const param = controller
    //   if(direction === "Lowest") {
    //     if(param === "clicks") AccountStore.loadAnalyticData_survaigns(AccountStore.analyticData_survaigns.slice().sort((a,b) => (this.clickRate(a) > this.clickRate(b)? 1 : -1)))
    //     else AccountStore.loadAnalyticData_survaigns(AccountStore.analyticData_survaigns.slice().sort((a,b) => (a[param] > b[param])? 1 : -1))
    //   }


    //   else {
    //     if(param === "clicks") AccountStore.loadAnalyticData_survaigns(AccountStore.analyticData_survaigns.slice().sort((a,b) => (this.clickRate(a) < this.clickRate(b)? 1 : -1)))
    //     else AccountStore.loadAnalyticData_survaigns(AccountStore.analyticData_survaigns.slice().sort((a,b) => (a[param] < b[param])? 1 : -1))
    //       }
  }
  }
  componentDidMount(){
    this.sort("sent", "Highest")
  }
  render() {
    const {AccountStore, EmailStore, UIStore, SurveyStore} = this.props


    

    const searchFilter = (all) => {
    //   if(UIStore.search.survaignsSearchValue === "") return all
    //   else return all.filter(i => i.subject.toLowerCase().includes(UIStore.search.survaignsSearchValue.toLowerCase()))
  }


    const surveys = !SurveyStore.allSurveys.length? null: searchFilter(SurveyStore.allSurveys).map(surv => {
    //   const s = EmailStore._getsurvaign(surv.survaignID)

    //   if(!survaign) return null
      return (
        <Table.Row key={"surv" + giveMeKey()}>
          <Table.Cell 
        //   disabled={!surv.completed? EmailStore._getsurvaign(surv.survaignID).isTriggered? false:true : false}
          >
            <Header>
              <Header.Content>
              {surv.label}
              </Header.Content>
            </Header>
          </Table.Cell>
          {/* <Table.Cell disabled={!surv.completed? EmailStore._getsurvaign(surv.survaignID).isTriggered? false:true : false}>{UTCtoFriendly(surv.sent)}</Table.Cell>
          <Table.Cell disabled={!surv.completed? EmailStore._getsurvaign(surv.survaignID).isTriggered? false:true : false}>{`${surv.total_views}/${surv.unique_views}`}</Table.Cell>
          <Table.Cell disabled={!surv.completed? EmailStore._getsurvaign(surv.survaignID).isTriggered? false:true : false}>{surv.open_rate}%</Table.Cell>
          <Table.Cell disabled={!surv.completed? EmailStore._getsurvaign(surv.survaignID).isTriggered? false:true : false}>{this.clickRate(surv)}%</Table.Cell>
          <Table.Cell></Table.Cell> */}
          {/* <Table.Cell> 
                    {survaignDetails(survaign)}
            </Table.Cell> */}
          </Table.Row>
        )
      })

    return (
      <div>
        <Header
          as="h2"
          content="Survey Performance"
        />
                   <div style={UIStore.responsive.isMobile? null : {float: 'right', paddingRight: 10, paddingBottom: 15,display: "inline-block"}}>     <SearchBox value={UIStore.search.survaignsSearchValue} output={val => UIStore.set("search", "survaignsSearchValue", val)}/></div>
     
          <Table padded="very" basic="very">
            <Table.Header>
              <Table.Row>
                <Table.HeaderCell rowSpan='2'>Name</Table.HeaderCell>
                <Table.HeaderCell>Last Launched<br/><span> <Icon size="small" name="arrow up" onClick={e => this.sort("sent", "Highest")}/> <Icon size="small" name="arrow down" onClick={e => this.sort("sent", "Lowest")}/></span></Table.HeaderCell>
                <Table.HeaderCell>Eligible Recipients <br/><span> <Icon size="small" name="arrow up" onClick={e => this.sort("total_views", "Highest")}/> <Icon size="small" name="arrow down" onClick={e => this.sort("total_views", "Lowest")}/></span></Table.HeaderCell>
                <Table.HeaderCell>Partially Completed<br/><span> <Icon size="small" name="arrow up" onClick={e => this.sort("open_rate", "Highest")}/> <Icon size="small" name="arrow down" onClick={e => this.sort("open_rate", "Lowest")}/></span></Table.HeaderCell>
                <Table.HeaderCell>Completed <br/><span> <Icon size="small" name="arrow up" onClick={e => this.sort("clicks", "Highest")}/> <Icon size="small" name="arrow down" onClick={e => this.sort("clicks", "Lowest")}/></span></Table.HeaderCell>
                <Table.HeaderCell>Duration <br/><span> <Icon size="small" name="arrow up" onClick={e => this.sort("clicks", "Highest")}/> <Icon size="small" name="arrow down" onClick={e => this.sort("clicks", "Lowest")}/></span></Table.HeaderCell>
                <Table.HeaderCell>Sentiment <br/><span> <Icon size="small" name="arrow up" onClick={e => this.sort("clicks", "Highest")}/> <Icon size="small" name="arrow down" onClick={e => this.sort("clicks", "Lowest")}/></span></Table.HeaderCell>
                
                <Table.HeaderCell></Table.HeaderCell>
                <Table.HeaderCell />
              </Table.Row>
            </Table.Header>

            <Table.Body>
                {surveys}
            </Table.Body>
          </Table>

   
       
      </div>
    );
  }
}
