import React from "react";
import { inject, observer } from "mobx-react";
import { Button, Header, Segment } from "semantic-ui-react";
import { SelectVariation } from "../SharedUI/SelectVariation";
import { withRouter } from "react-router-dom";
import { getDisplayTags } from "../SharedCalculations/GetDisplayTags";
import { ManageVariationData } from "../SharedUI/ManageVariationData";
import BackButton from "../SharedUI/BackButton";
import { FeaturedImage } from "../SharedUI/ManageContent/FeaturedImage";
import { AddToEmail } from "../SharedUI/ManageContent/AddToEmail";
import { Keywords } from "../SharedUI/ManageContent/Keywords";
import { ReviewAlerts } from "../SharedUI/ManageContent/ReviewAlerts";
import { Schedule } from "../SharedUI/ManageContent/Schedule";
import { History } from "../SharedUI/ManageContent/History";
import { Settings } from "../SharedUI/ManageContent/Settings";
import { generateID } from "../SharedCalculations/GenerateID";
import _ from "lodash";


@inject(
  "TeamStore",
  "DataEntryStore",
  "AnnouncementsStore",
  "DataEntryStore",
  "UIStore"
)
@observer
class ManageAnnouncement extends React.Component {
  componentDidMount() {
    console.log(this.props)
    const { UIStore, AnnouncementsStore, DataEntryStore } = this.props;
   
      if(UIStore.content.anncID === "" 
        || this.props.match.params.id !== UIStore.content.anncID
        || DataEntryStore._isReset("contentmgmt")){
        if(!_.isEmpty(AnnouncementsStore._getAnnouncement(this.props.match.params.id))) {
          UIStore.set("content", "anncID", this.props.match.params.id)
          const obj = Object.assign({}, AnnouncementsStore._getAnnouncement(UIStore.content.anncID))
          UIStore.set("content", "variationID", AnnouncementsStore._toggleGlobalVariation(obj.anncID))
          DataEntryStore.set("contentmgmt", "label", obj.label)
          DataEntryStore.set("contentmgmt", "img", obj.img)
          DataEntryStore.set("contentmgmt", "bundle", "queue")
          DataEntryStore.set("contentmgmt", "keywords", obj.keywords)
          DataEntryStore.set("contentmgmt", "reviewAlert", obj.reviewAlert)
        }
   
        else{this.props.history.push("/panel/announcements")}
      
    
      UIStore.set("content", "variationID", AnnouncementsStore._toggleGlobalVariation(UIStore.content.anncID))
      
    }
    
  }

  render() {
    const {
      TeamStore,
      DataEntryStore,
      AnnouncementsStore,
      UIStore
    } = this.props;

    const variations = () => {
      return AnnouncementsStore._getAnnouncement(
        UIStore.content.anncID
      ).variations.map(variation => ({
        key: variation.variationID,
        value: variation.variationID,
        description: getDisplayTags(variation.tags, TeamStore.tags),
        text: TeamStore.teamKey[variation.teamID],
        type: variation.type
      }));
    };

    const handleEdit = e => {
      e.preventDefault();
      const vari = Object.assign({}, 
      AnnouncementsStore._getVariation(UIStore.content.anncID, UIStore.content.variationID))
      DataEntryStore.set("content", "label", vari.label)
      DataEntryStore.set("content", "teamID", vari.teamID)
      DataEntryStore.set("content", "tagID", vari.tags.length === 0? "none" : vari.tags[0])
      DataEntryStore.set("content", "draftContentRAW", vari.draftContentRAW)
      DataEntryStore.set("content", "draftContentHTML", vari.draftContentHTML)
      DataEntryStore.set("content", "draft", vari.draft)
      DataEntryStore.set("content", "stage", vari.stage)
      DataEntryStore.set("content", "isNew", false)
      this.props.history.push(
        "/panel/announcement-variation/" +
          vari.variationID
      );
    };

    const handleChange = val => {
      UIStore.set("content", "variationID", val)
    };

    const handleCreateNew = e => {
      e.preventDefault();
      UIStore.set("content", "variationID", generateID())
      DataEntryStore.set("content", "isNew", true)
      this.props.history.push(
        "/panel/announcement-variation/" + UIStore.content.variationID
      );
    }; 

    const manageAnnouncement =
      UIStore.content.anncID === "" ? (
        <div>{UIStore.content.anncID} hi</div>
      ) : (
        <React.Fragment>
          <BackButton />
          <Header
            as="h2"
            content="Manage Announcement"
            subheader={DataEntryStore.contentmgmt.label}
          />
          <Segment>
            <div style={{ maxWidth: 600 }}>
              <Header>Available Variations</Header>
              <br />
              <SelectVariation
                variations={variations()}
                defaultVal={UIStore.content.variationID}
                whenChanged={handleChange}
              />
              <Button
                style={{ display: "inline-block", marginLeft: 5 }}
                onClick={e => handleEdit(e)}
              >
                Edit...
              </Button>
              <Button
                color="blue"
                style={{ display: "inline-block" }}
                  onClick={e => handleCreateNew(e)}
              >
                Create New...
              </Button>
            </div>
            <ManageVariationData 
             variation={AnnouncementsStore._getVariation(UIStore.content.anncID, UIStore.content.variationID)} 
             type={"announcement"}
          />
          </Segment>
          <FeaturedImage
            defaultImgUrl={DataEntryStore.contentmgmt.img}
            output={val => DataEntryStore.set("contentmgmt", "bundle", val)}
          />
          <AddToEmail 
            select={val => DataEntryStore.set("contentmgmt", "bundle", val)} 
            clicked={e => alert("hi")}
            />

          <Keywords output={e => alert("hi")} />
          <ReviewAlerts
            period={val => console.log(val)}
            date={val => console.log(val)}
            clicked={e => console.log("clicked")}
          />
          <Schedule state={AnnouncementsStore._getAnnouncement(UIStore.content.anncID).state} />
          <History />
          {/* <Settings mode={"policy"} /> */}

          <br />
        </React.Fragment>
      );

    return <div style={{ maxWidth: 700 }}>{manageAnnouncement}</div>;
  }
}

export default withRouter(ManageAnnouncement);
